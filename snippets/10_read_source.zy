extern malloc -> &[]u8:
  size: usize;

extern free -> void:
  ptr: &[]u8;

// this is not correct but since we're just using it for
// the pointer, it should be okay -- effectively `void*`
type FILE := []u8;

type c_str := []u8;

// fs
extern fopen -> &FILE:
  filename: &c_str,
  mode: &c_str;

extern fclose -> i32:
  stream: &FILE;

extern fseek -> i32:
  stream: &FILE,
  offset: i32,
  whence: i32;

extern ftell -> i32:
  stream: &FILE;

extern fread -> usize:
  ptr: &[]u8,
  size: usize,
  nmemb: usize,
  stream: &FILE;

extern puts -> i32:
  s: &c_str;

extern printf -> i32:
  format: &c_str, ...;

read_file -> &[]u8:
  path: &[]u8
{
  const SEEK_SET: i32 := 0;
  const SEEK_CUR: i32 := 1;
  const SEEK_END: i32 := 2;

  f: &FILE := fopen(path, c"r");

  fseek(f, 0, SEEK_END);
  fsize := ftell(f) as usize;

  fseek(f, 0, SEEK_SET);

  string: &c_str := malloc(fsize + 1);

  fread(string, 1, fsize + 1, f);
  string[fsize] = 0;

  fclose(f);

  string
};

main -> i32 {
  string := read_file(c"tests/10_read_source.zy");

  puts(string);

  free(string);

  0
};
