/* Copyright (c) 2024 Stan Strum
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

template: T;
export interface Add {
  public __add -> T:
    lhs: T,
    rhs: T;
};

template: T;
export interface Sub {
  public __sub -> T:
    lhs: T,
    rhs: T;
};

template: T;
export interface IMul {
  public __imul -> T:
    lhs: T,
    rhs: T;
};

template: T;
export interface IDiv {
  public __idiv -> T:
    lhs: T,
    rhs: T;
};

export interface IArithmetic extends Add, Sub, IMul, IDiv;

impl u8: IArithmetic {
  __add -> u8:
    lhs: u8,
    rhs: u8
  __llvm {
    %tmp1 = add u8 %lhs, %rhs
    ret u8 %tmp1
  };

  __sub -> u8:
    lhs: u8,
    rhs: u8
  __llvm {
    %tmp1 = sub u8 %lhs, %rhs
    ret u8 %tmp1
  };

  __imul -> u8:
    lhs: u8,
    rhs: u8
  __llvm {
    %tmp1 = imul u8 %lhs, %rhs
    ret u8 %tmp1
  };

  __idiv -> u8:
    lhs: u8,
    rhs: u8
  __llvm {
    %tmp1 = idiv u8 %lhs, %rhs
    ret u8 %tmp1
  };
};

template:
  T extends std::ops::Multiply;
interface Double {
  public double -> T {
    self * 2
  };

  public mut double_self -> T {
    self |>= $.double()
  };
};

test double {
  mut s: f32 := 40;

  b := s.double();
  s = b;

  s |>= $.double();
};
